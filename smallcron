#! /usr/bin/env perl
use strict;
use warnings;
use feature qw{ say };
use Mojo::IOLoop;
use Time::Local;
use FileHandle;
use IO::Compress::Gzip qw{ gzip $GzipError };
use Data::Dumper;

my $RELOAD_SECOND   = 60;   # loop cycle
my $SCHEDULE_MINUTE = 5;    # schedule cycle
my $TELNET_PORT     = 8081; # port number
my $SCHEDULE_FILE_PATH = '/var/citool/etc/cron.txt';
my $SCHEDULE_LOG_PATH  = '/var/citool/logs/schedule.log';
my $RESULT_LOG_PATH    = '/var/citool/logs/result.log';
my $LOG_ROTATE_DIR     = '/var/citool/logs/old';
my $VARIABLES_DIR      = '/var/citool/variables/';

#
# 変数を使うには、ここに設定を書き、更に変数ファイルが必要です。
# （無いと初回だけundefinedになります）
# $VARIABLES_DIR以下に変数名のファイルを置き、初回の値を記入します。
# 以降実行毎に、ファイルの内容が設定値なら次の値、最後まで行けば先頭に戻ります。
#
# [To:{cwid}] {cwname}
my $VARIABLES = {
	cwid => [],
	cwname => [],
};

my $time;
my %jobs;
my $inputBody = '';

sub timeEmulation
{
	# 1484291635 - 15 * 60 # 1/13 15:58:55
	$time ||= time
}

#
# n分後までのcron日時配列を生成
#
sub generateAfter5minCronTime
{
	my($afterMinutes) = @_;
	$afterMinutes ||= $SCHEDULE_MINUTE;
	my @datetimes;
	my $now = time;
	for my $i(0..$afterMinutes)
	{
		my($sec,$min,$hour,$day,$month,$year,$wday) = localtime($now + $i * 60);
		push @datetimes, {
			month  => $month+1,
			day    => $day,
			hour   => $hour,
			minute => $min,
			day    => $day,
		};
	}
	\@datetimes
}

sub getParser
{
	my($options) = @_;
	my $datetimes = generateAfter5minCronTime($SCHEDULE_MINUTE);

	$inputBody = '';
	if($SCHEDULE_FILE_PATH)
	{
		my $fh = FileHandle->new($SCHEDULE_FILE_PATH, 'r') or die(
			'cannot read ' . $SCHEDULE_FILE_PATH
		);
		while(my $buff = $fh->getline) { $inputBody .= $buff; }
		$fh->close;
	}
	elsif(not $inputBody)
	{
		while(read STDIN, my $buff, 100) { $inputBody .= $buff; }
	}
	my $parser = Parse::Cron->new(
		DATETIMES     => $datetimes,
		VARIABLES_DIR => $VARIABLES_DIR,
		VARIABLES     => $VARIABLES,
	);
	$parser->parse($inputBody, $options)
}

sub getNowDatetime
{
	my($argTime) = @_;
	$argTime ||= timeEmulation;
	my($sec,$min,$hour,$day,$mon,$year,$wday) = localtime($argTime);
	+{
		second  => $sec,
		minute  => $min,
		hour    => $hour,
		day     => $day,
		month   => $mon + 1,
		year    => $year + 1900,
		weekday => $wday,
	}
}

sub datetime2string
{
	my($dt) = @_;
	sprintf(
		"%d-%02d-%02d %02d:%02d:%02d",
		$dt->{'year'},
		$dt->{'month'},
		$dt->{'day'},
		$dt->{'hour'},
		$dt->{'minute'},
		$dt->{'second'},
	)
}

sub rotateLog
{
	my($path) = @_;
	return unless $LOG_ROTATE_DIR;
	my $mtime = (stat($path))[9];
	my($sec,$min,$hour,$day,$mon,$year) = localtime $mtime;
	my $nowDatetime = getNowDatetime;

	return if $nowDatetime->{'day'} == $day;

	{
		my @parts = split m!(?:/|\\)!, $path;
		my $fname = $parts[$#parts];
		my $rotateFilePath = sprintf('%s/%s.%s%02d%02d.gz', $LOG_ROTATE_DIR, $fname, $year+1900, $mon+1, $day);
		gzip $path => $rotateFilePath or do {
			say 'gzip failed: ' . $GzipError;
			return
		};
	}
	my $fh = FileHandle->new($path, 'w') or do {
		say 'cannot rotate: ' . $GzipError;
		return;
	};
	$fh->close
}

sub writeScheduleLog
{
	return unless $SCHEDULE_LOG_PATH;
	my($string) = @_;
	rotateLog($SCHEDULE_LOG_PATH);
	my $fh = FileHandle->new($SCHEDULE_LOG_PATH, 'a') or die(
		'cannot write ' . $SCHEDULE_LOG_PATH
	);
	my $nowDatetime = getNowDatetime(time);
	my $datetimeString = datetime2string($nowDatetime);
	$fh->printf("[%s] %s\n", $datetimeString, $string);
	$fh->close;
}

sub writeResultLog
{
	return unless $RESULT_LOG_PATH;
	my($string) = @_;
	rotateLog($RESULT_LOG_PATH);
	my $fh = FileHandle->new($RESULT_LOG_PATH, 'a') or die(
		'cannot write ' . $RESULT_LOG_PATH
	);
	my $nowDatetime = getNowDatetime;
	my $datetimeString = datetime2string($nowDatetime);
	$fh->printf("[%s] %s\n", $datetimeString, $string);
	$fh->close;
}

sub getNextVariableValue
{
	my($name) = @_;
	if(open my $fh, '<', $VARIABLES_DIR . $name)
	{
		my $buf;
		my $fbody = '';
		$fbody .= $buf while read $fh, $buf, 100;
		close $fh;
		chomp $fbody;

		my $matched = 0;
		for my $value(@{$VARIABLES->{$name}})
		{
			return $value if $matched;
			$matched = 1 if $value eq $fbody;
		}
	}
	$VARIABLES->{$name}[0]
}

sub updateVariables
{
	my($cli) = @_;
	my $isMatched = 0;
	for my $name(keys %$VARIABLES)
	{
		writeScheduleLog('SEARCH VAL ' . $name);
		if($cli =~ /\{\s*$name\s*\}/)
		{
			writeScheduleLog('VAL ' . $name . ' IS MATCHED');
			my $nextValue = getNextVariableValue($name);
			writeScheduleLog('NEXT VAL IS ' . $nextValue);
			my $fname = $VARIABLES_DIR . $name;
			open my $fh, '>', $fname or return;
			print $fh $nextValue;
			close $fh;
		}
	}
}

sub getSecondAfter
{
	# ここに来た時点で5分以内なので
	# 1時間以上先のスケジュールは考えない(分しか見ない)
	#
	my($hash) = @_;
	my $now = getNowDatetime;
	my $minute = $hash->{'minute'} =~ /\D/ ? $now->{'minute'} : $hash->{'minute'};
	if($now->{'minute'} > $minute)
	{
		$minute = 60 + $hash->{'minute'}
	}
	if($minute < 0)
	{
		say 'ERROR : minute = 60 + ' . $hash->{'minute'};
	}
	60 * ($minute - $now->{'minute'}) || 10 # 今なら10秒後
}

sub setSchedule
{
	my($scheduleHash) = @_;
	my $parser = getParser([]);
	my $digest = $parser->getDigestByHashRef($scheduleHash, 'secondAfter');
	$jobs{$digest} = $scheduleHash;
	$scheduleHash->{'secondAfter'} ||= getSecondAfter($scheduleHash);

	say('SECOND AFTER : ' . $scheduleHash->{'secondAfter'});
	if($scheduleHash->{'secondAfter'} < 0)
	{
		say Dumper($scheduleHash);
	}

	writeScheduleLog(
		$scheduleHash->{'cli'} . ' at ' .
		$scheduleHash->{'secondAfter'} . 'seconds after.'
	);

	Mojo::IOLoop->timer($scheduleHash->{'secondAfter'} => sub {
		my $cli = $scheduleHash->{'cli'};
		$parser->mergeVariables(\$cli) if $parser->{'VARIABLES_DIR'};
		system($cli . ' >> ' . $RESULT_LOG_PATH . ' 2>&1 &');
		my $result = $? >> 8 ? 'FAIL' : 'SUCCESS';

		updateVariables($scheduleHash->{'cli'}) if $result eq 'SUCCESS';
		delete $jobs{$digest};
		writeResultLog($result . ' ' . $scheduleHash->{'cli'});
	});
}

sub scheduleHasSet
{
	my($scheduleHash) = @_;
	my $parser = getParser(['novariables']);
	my $digest = $parser->getDigestByHashRef($scheduleHash, 'secondAfter');
    exists $jobs{$digest} ? 1 : undef
}

#
# 1分毎に全探索して5分以内に起こるスケジュールをタイマー登録
#
sub reloadSchedule
{
	use Data::Dumper;
	$time = timeEmulation;
	Mojo::IOLoop->timer($RELOAD_SECOND => sub {
		writeScheduleLog('RELOAD');
		my $parser = getParser(['novariables']);
		while(my $schedule = $parser->iterate)
		{
			# 既に登録済なら無視
			if(scheduleHasSet($schedule))
			{
				writeScheduleLog('1 record has scheduled.');
				next;
			}
			# 登録
			setSchedule($schedule);
		}
		reloadSchedule()
	})
}

sub readResultLog
{
	my $fh = FileHandle->new($RESULT_LOG_PATH, 'r') or die(
		'cannot read ' . $RESULT_LOG_PATH
	);
	while(my $buff = $fh->getline) { $inputBody .= $buff; }
	$fh->close;
	my $fbody = '';
	while(my $buff = $fh->getline)
	{
		$fbody .= $buff;
	}
	$fh->close;
	$fbody
}

sub showLog
{
	my($stream, $limit) = @_;
	my $log = readResultLog;
	my $counter = 0;
	while($log =~ /(.+)\r?\n/g)
	{
		my $row = $1;
		if($row =~ /^\[([\d\s:-]+)\] (SUCCESS|FAIL) (.+)/)
		{
			$counter++;
			$stream->write(sprintf("[%s] %s %s\n", $2, $1, $3));
			last if $counter > $limit
		}
	}
}

sub trim(\$)
{
	my($str) = @_;
	$str =~ s/^\s+//;
	$str =~ s/^\s+$//;
}

sub wday2JPN
{
	my($wday) = @_;
	trim $wday;
	if($wday eq '*')
	{
		$wday = ''
	}
	elsif($wday =~ /^[\d,]+$/)
	{
		my @jpwdays = split /,\s*/, $wday;
		my @wdays;
		for my $jpwday(@jpwdays)
		{
			push @wdays, qw{日 月 火 水 木 金 土}[$jpwday];
		}
		$wday = join ', ', @wdays;
	}
	$wday
}

sub month2JPN
{
	my($month) = @_;
	trim $month;
	if($month eq '*')
	{
		$month = ''
	}
	elsif($month =~ m!\*/(\d)!)
	{
		$month = $1 eq '1' ? '' : $1 . 'ヶ月毎'
	}
	elsif($month =~ /^[\d,]+$/)
	{
		$month .= '月';
	}
	$month
}

sub day2JPN
{
	my($day) = @_;
	trim $day;
	if($day eq '*')
	{
		$day = ''
	}
	elsif($day =~ m!\*/(\d)!)
	{
		$day = $1 eq '1' ? '' : $1 . '日毎'
	}
	elsif($day =~ /^[\d,]+$/)
	{
		$day .= '日';
	}
	$day
}

sub hour2JPN
{
	my($hour) = @_;
	trim $hour;
	if($hour eq '*')
	{
		$hour = ''
	}
	elsif($hour =~ m!\*/(\d)!)
	{
		$hour = $1 eq '1' ? '' : $1 . '時間毎'
	}
	elsif($hour =~ /^[\d,]+$/)
	{
		$hour .= '時';
	}
	$hour
}

sub minute2JPN
{
	my($minute) = @_;
	trim $minute;
	if($minute eq '*')
	{
		$minute = ''
	}
	elsif($minute =~ m!\*/(\d)!)
	{
		$minute = $1 . '分毎'
	}
	elsif($minute =~ /^[\d,]+$/)
	{
		$minute .= '分';
	}
	$minute
}

sub scheduleRow2JPN
{
	my($columns) = @_;

	# 分 時 日 月 曜 CLI
	my @schedule = (
		month2JPN($columns->{'month'}),
		day2JPN($columns->{'day'}),
		wday2JPN($columns->{'weekday'}),
		hour2JPN($columns->{'hour'}),
		minute2JPN($columns->{'minute'}),
		$columns->{'cli'},
	);
	join "\t", @schedule
}

sub getAllSchedule
{
	my($stream,$number) = @_;
	$number ||= 1;
	my $parser = getParser(['novariables']);
	my @schedules;
	for(my $i=0; $i<$number; $i++)
	{
		my $row = $parser->iterate or last;
		push @schedules, $row;
	}
	\@schedules
}

sub showAllScheduleTSV
{
	my($stream,$number) = @_;
	$number ||= 1;
	my $schedules = getAllSchedule($stream, $number);

	my @tsvRows;
	for my $schedule(@$schedules)
	{
		push @tsvRows, scheduleRow2JPN($schedule);
	}
	$stream->write(join("\n", @tsvRows) . "\n")
}

sub addSchedule
{
	my($stream,$row) = @_;

	my $fh = FileHandle->new($SCHEDULE_FILE_PATH, 'a') or die(
		'cannot write ' . $SCHEDULE_FILE_PATH
	);
	chomp $row;
	$fh->print($row . "\n");
	$fh->close;
}

# TODO
sub modifySchedule
{
	my($stream,$row) = @_;

	my $fh = FileHandle->new($SCHEDULE_FILE_PATH, 'a') or die(
		'cannot read ' . $SCHEDULE_FILE_PATH
	);
	chomp $row;
	$fh->print($row . "\n");
	$fh->close;
}

sub removeSchedule
{
	my($stream,$number) = @_;
	$number = int $number;
	my $fh = FileHandle->new($SCHEDULE_FILE_PATH, 'r') or die(
		'cannot read ' . $SCHEDULE_FILE_PATH
	);
	my $fbody = '';
	my $cnt = 0;
	while(my $line = $fh->getline)
	{
		$cnt++;
		$fbody .= $line if $cnt != $number;
	}
	$fh->close;

	$fh = FileHandle->new($SCHEDULE_FILE_PATH, 'w') or die(
		'cannot write ' . $SCHEDULE_FILE_PATH
	);
	$fh->print($fbody);
	$fh->close;
}

sub loop
{
	Mojo::IOLoop->server({ port => $TELNET_PORT } => sub {
		my($loop, $stream, $id) = @_;
		#
		# ここからコマンドライン
		#
		$stream->on(read => sub {
			my($stream, $bytes) = @_;
			$bytes =~ tr/\r\n//d;
			if(lc $bytes eq 'shutdown')
			{
				$stream->write("CITool is shutting down....\n");
				Mojo::IOLoop->timer(2 => sub { Mojo::IOLoop->reset });
			}
			elsif($bytes =~ /add\s+(.+)/i)
			{
				addSchedule($stream, $1);
				$stream->write("ADDED\n");
			}
			elsif($bytes =~ /modify\s+(\d+)\s+(.+)/i)
			{
				modifySchedule($stream, $1, $2);
				$stream->write("MODIFIED\n");
			}
			elsif($bytes =~ /remove\s+(\d+)/i)
			{
				removeSchedule($stream, $1);
				$stream->write("REMOVED\n");
			}
			elsif(lc $bytes eq 'reload')
			{
				reloadSchedule;
				$stream->write("RELOADED\n");
			}
			elsif($bytes =~ /^log\s*(\d*)/i)
			{
				my $number = $1 || 10;
				showLog($stream,$number) if $RESULT_LOG_PATH;
			}
			elsif($bytes =~ /^schedule\s*(\d*)/i)
			{
				my $number = $1 || 1;
				showAllScheduleTSV($stream,$number);
			}
			elsif($bytes =~ /^rotate/i)
			{
				rotateLog($SCHEDULE_LOG_PATH);
				rotateLog($RESULT_LOG_PATH);
				$stream->write("rotated\n");
			}
			elsif(lc $bytes eq 'quit')
			{
				$stream->write("byebye\n");
				Mojo::IOLoop->remove($id);
			}
		});
	});
	reloadSchedule;
	Mojo::IOLoop->start unless Mojo::IOLoop->is_running;
}

writeScheduleLog('SERVER STARTED');
loop;
writeScheduleLog('SERVER FINISHED');

package JPDate;
use strict;
use warnings;
use Data::Dumper;
use feature qw{ say };

sub new
{
	my($class, %args) = @_;
	$args{'weekday'} ||= ['日', '月', '火', '水', '木', '金', '土'];
	$args{'month_suffix'} ||= '月';
	$args{'day_suffix'} ||= '日';
	$args{'time'} ||= time;
	bless \%args, $class
}

#
# my $jpdate = JPDate->new;
# my $weekday_6days_after = $jpdate->weekday(6 * 24 * 3600);
# my $day_6days_after = $jpdate->day(6);
#
sub weekday
{
	my($self, $secs_after) = @_;
	$secs_after ||= 0;
	my($sec,$min,$hour,$day,$month,$year,$wday) = localtime(
		$self->{'time'} + $secs_after
	);
	$self->{'weekday'}[$wday]
}

sub day
{
	my($self, $secs_after) = @_;
	$secs_after ||= 0;
	my($sec,$min,$hour,$day,$month,$year,$wday) = localtime(
		$self->{'time'} + $secs_after
	);
	$day . $self->{'day_suffix'}
}

package Parse::Cron;
use strict;
use warnings;
use feature qw{ say };
use Digest::MD5;
use Data::Dumper;

sub new
{
	my($class, %args) = @_;
	$args{'parsed'} = [];
	bless \%args, $class
}

sub parsed
{
	my($self,$ref) = @_;
	$self->{'parsed'} = $ref;
	$self->{'counter'} = 0;
	$self
}

sub set
{
	my($self, $key, $value) = @_;
	$self->{$key} = $value;
}

sub get
{
	my($self, $key) = @_;
	$self->{$key}
}

sub iterate
{
	my($self) = @_;
	my $i = $self->{'counter'} ++;
	if($i > $#{$self->{'parsed'}})
	{
		$self->{'counter'} = 0;
		return;
	}

	$self->{'parsed'}[$i]
}

sub getDigestByHashRef
{
	my($self,$scheduleHash, @ignoreList) = @_;
	my %ignoreHash = map { $_ => '' } @ignoreList;
	my $md5 = Digest::MD5->new();
	for my $key(sort keys %$scheduleHash)
	{
		next if exists $ignoreHash{$key};
		$md5->add($key)->add($scheduleHash->{$key});
	}
	$md5->hexdigest()
}

sub explode
{
	my($self,$hashs) = @_;
	my %inserted;
	for(my $i=0; $i<=$#$hashs; $i++)
	{
		my $isMatched = 0;
		for my $key(qw{minute hour day month weekday})
		{
			my @tmp = split /,/, $hashs->[$i]{$key};
			if($#tmp > 0)
			{
				for(my $j=0; $j<=$#tmp; $j++)
				{
					my %hash = %{$hashs->[$i]};
					$hash{$key} = $tmp[$j];
					my $digest = $self->getDigestByHashRef(\%hash);
					$isMatched = 1;
					next if exists $inserted{$digest};
					$inserted{$digest} = '';
					push @$hashs, \%hash;
				}
			}
		}
		undef $hashs->[$i] if $isMatched;
	}
	@$hashs = grep { $_ } @$hashs;
}

sub getVariableValue
{
	my($self,$name) = @_;
	my $fname = $self->{'VARIABLES_DIR'} . $name;
	return 'undefined' unless -f $fname;
	my $firstValue = $self->{'VARIABLES'}{$name}[0];
	my $fbody = '';

	if(open my $fh, '<', $fname)
	{
		while(read $fh, my $buf, 100)
		{
			$fbody .= $buf;
		}
		close $fh;
	}
	else
	{
		$fbody = $firstValue;
		if(open my $fh, '>', $fname)
		{
			print $fh $firstValue;
			close $fh;
		}
	}
	chomp $fbody;
	$fbody
}

sub getJPDate
{
	my($self, $method, $pm, $num, $unit) = @_;
	my $jpdate = JPDate->new;
	my $addition = $pm eq '+' ? $num : $num * -1;
	my %units = (
		'days'  => 24 * 3600,
		'hours' => 3600,
		'mins'  => 60,
		'secs'  => 1,
	);
	$addition *= $units{$unit};
	$jpdate->$method($addition)
}

sub mergeVariables
{
	my($self, $rcli) = @_;
	for my $name(keys %{$self->{'VARIABLES'}})
	{
		$$rcli =~ s/\{\s*($name)\s*\}/$self->getVariableValue($1)/eg;
	}

	$$rcli =~ s/\{\s*(weekday|day)\s*(\+|\-)\s*(\d+)\s*(days)\s*\}/$self->getJPDate($1,$2,$3,$4)/eg;
}

sub isMatchedDatetime
{
	my($self, $row) = @_;
	return 1 if(not exists $self->{'DATETIMES'} or not $self->{'DATETIMES'});
	my($minute, $hour, $day, $month, $weekday, $cli) = split /\s+/, $row, 6;

	my $isMatched = 1;
	for my $datetime(@{$self->{'DATETIMES'}})
	{
		if(
			($month  eq '*' or int($month)  == int($datetime->{'month'})) and
			($day    eq '*' or int($day)    == int($datetime->{'day'}))   and
			($hour   eq '*' or int($hour)   == int($datetime->{'hour'}))  and
			($minute eq '*' or int($minute) == int($datetime->{'minute'}))
		) 
		{
			return 1;
			last;
		}
	}
	0
}

#
# カンマ区切り日時を複数行に
#
sub splitLines
{
	my($self, $rows) = @_;
	my @result;
	my %row;
	my $lastLineNumber = $#$rows;
	for(my $i=0; $i<=$lastLineNumber; $i++)
	{
		next if not $rows->[$i];
		($row{'minute'}, $row{'hour'}, $row{'day'}, $row{'month'}, $row{'weekday'}, $row{'cli'}) = split /\s+/, $rows->[$i], 6;
		my $str = $row{'minute'} . $row{'hour'} . $row{'day'} . $row{'month'} . $row{'weekday'};
		next if $str !~ /,/;
		for my $name(qw{minute hour day month weekday})
		{
			next if $row{$name} !~ /,/;
			my @nums = split /,/, $row{$name};
			$rows->[$i] = '';
			for my $num(@nums)
			{
				my %tmp = %row;
				$tmp{$name} = $num;
				push @$rows, sprintf(
					'%s %s %s %s %s %s', $tmp{'minute'}, $tmp{'hour'}, $tmp{'day'}, $tmp{'month'}, $tmp{'weekday'}, $tmp{'cli'}
				);
				$lastLineNumber++;
			}
		}
	}
	@$rows = grep { !/^\s*$/ } @$rows;
}

sub parse
{
	my($self, $fbody, $option) = @_;
	my @rows = split /\r?\n/, $fbody;
	grep { s/^\s+// } @rows;
	@rows = grep { /^[^#]/ } @rows;
	$self->splitLines(\@rows);

	my @result;
	for my $row(@rows)
	{
		my($minute, $hour, $day, $month, $weekday, $cli) = split /\s+/, $row, 6;
		$cli or next;
		$self->isMatchedDatetime($row) or next;
		$self->mergeVariables(\$cli) if($option ne 'novariables' and  $self->{'VARIABLES_DIR'});
		push @result, {
			minute  => $minute,
			hour    => $hour,
			day     => $day,
			month   => $month,
			weekday => $weekday,
			cli     => $cli,
		};
	}
	$self->explode(\@result);
	$self->parsed(\@result)
}

1

__END__

先頭付近の以下をそれなりに設定します。

my $RELOAD_SECOND   = 60; # loop cycle

スケジュールファイルのリロード周期です。(60秒毎)

my $SCHEDULE_MINUTE = 5;  # schedule cycle

5で最長5分後の予定まで予約します。

my $SCHEDULE_FILE_PATH = '/var/citool/etc/cron.txt';

スケジュールファイルのパスです。crontab形式です。
*/5 の形式は使えません。5,10,15 の形式は使えます。
全て*にすると毎日毎分毎時実行します。

0,1,5,10 1,2,3,4,5 * * * echo '寝たら死ぬぞi!!'

my $SCHEDULE_LOG_PATH  = '/var/citool/logs/schedule.log';

スケジュール登録のログファイルです。空文字ならログ出力しません。

my $RESULT_LOG_PATH    = '/var/citool/logs/result.log';

スケジュール実行結果のログファイルです。空文字ならログ出力しません。

my $LOG_ROTATE_DIR = '/var/cittol/logs';

ログを毎日退避させるディレクトリを指定します。空文字なら何もしません。




